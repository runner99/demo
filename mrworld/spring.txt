1】什么是IOC(控制反转)， IOC解决了什么问题，它和依赖注入的区别
控制反转描述的时java中对象的创建和管理这件事，用一个IOC容器来负责对象的创建和管理，IOC容器会把类需要的对象注入。解决了类和类之间的解耦问题。
2】什么是AOP【把横切逻辑和业务逻辑分开】，解决了什么问题【在不改变原有业务逻辑情况下，增强横切逻辑代码，根本上解耦合，避免横切逻辑代码】
AOP代指面向切面编程，用于将横切代码和业务代码分离，避免横切代码重复
3】IOC 基础：BeanFactory 和 ApplicationContext 的区别 bean的scope和生命周期 实例化bean的方式 bean标签的属性     依赖注入的方式【构造函数和set】
 BeanFactory 是IOC容器的顶层接口，定义了一个基础容器，ApplicationContext是BeanFactory的一个子接口，除了实现BeanFactory的内容还包含其他接口，是容器的高级接口
IOC容器配置时有三种方式 xml ,xml+注解，纯注解的。 纯xml 时，bean的实例化
4】IOC 容器高级特性 延迟加载 ，beanFactory与 factoryBean ，后置处理器
5】IOC 容器初始化的主体流程
6】BeanFactory创建流程

Spring 的AOP的理解
AOP即面向切面编程，是对OOP的补充。 AOP采用了横切的技术，将代码分为业务逻辑代码和横切代码。横切代码是指和业务无关的却被相当一部分业务模块使用的代码，AOP将横切代码封装成通知，以切面的形式织入到业务逻辑代码中。
AOP中有几个核心概念，横切代码的切入位置叫切入点，被切入的业务逻辑所在方法叫连接点。
Spring对AOP 的支持有： 
1.AOP代理由IOC容器创建和管理，AOP代理的依赖也由IOC容器注入。Spring对与AOP代理默认采用java动态代理，它为所有接口实例设置代理对象。如果代理对象没有实现任何接口，Spring将切换成CGLIB代理方式。CGLIB是通过构造一个子类，
然后在子类的多态方法中织入横切逻辑来完成代理的