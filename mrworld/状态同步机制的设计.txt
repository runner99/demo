问题：用户掉线后，重新连接，如何保证用户
考虑的方面：流量尽可能少， 精准度尽可能地高

同步停止的条件是？


------------------------------------------------------------------------------------------------------------
1.创建房间成功的时候指定进入的模板 Template 和一个初始的状态文件
2.主机开始连接消息服务器，主机监控输入设备，先执行主机命令，然后将监听到的命令传输到消息模块
3.消息模块将命令转发给同在一个房间下的其他主机
4.从机执行命令
----------------------------------------------------------------------------------------------------------- 
1. 主机所做的操作严重依赖于客户端，客户端必须满足以下条件
    1.1 主机所做的一切操作都能被监听到，主机按照顺序执行完所有命令后得到的结果和现状是一致的。
    1.2 监听到的命令能够完全按照顺序且没有丢包的到达消息模块 ，保证监听到什么，服务端就会收到什么
    1.3 到达消息模块的命令能够完全的转发到同在一个房间的从机
    1.4 同样的命令在不同的机器上和一段延迟后再次执行的结果完全相同 【执行后的状态一致，执行消耗时间一致】
2. 延迟 由监听延迟+传输时间+服务端处理时间+客户端处理时间四部分构成。
    2.1 服务端上能非常迅速的找到房间并将命令返回给从机
    2.2 客户端接受命令后能迅速执行
    2.3 每一个从机和主机的延迟需要稳定在一个帧数，主机总会领先从机一定时间，但是这个时间差在同步结束之前不能有变化，因为变化意味着从机执行命令的速度和主机不一致，可能影响用户体验
    2.4 传输的命令尽可能地小，  服务器向从机一次发送多个命令，而非一次就发送一个命令
3. 并发数量（房间内的用户数量）
    3.1 一个服务器上的内存，cpu，磁盘资源有限。要想一台服务器支持更多的用户连接，服务器的处理内容尽可能的少
    3.2 服务器上需要支持横向扩展，当一台机器不满足使用时，可以通过负载均衡减轻压力 
4. 跨平台
    4.1 相同的命令在不同的平台上执行效果一致
5. 安全
    5.1 命令签名 
    5.2 只有接收到来自服务端的消息才进行处理
6.中途加入或退出
    6.1 需要快速执行的已经执行过的命令

现有问题是：
1. 同样的输入+同样命令在不同从机上的结果并不能保证一致，不管是执行时长和执行时间
2. 主机和从机的时间一致性没有保证，没有帧的概念

解决方案：
1.主机从机之间要确保最终一致性，主机上的状态在经过一定时间后都会体现在从机中。
        由于命令执行的不稳定性，所以从机隔一定时间就询问主机当前时刻的状态是否一致，如果发生不一致问题，主机主动暴露自己的状态给从机，从机阻塞式的重新回刷状态。
        刷回状态后，主机执行命令的时候，从机跟进即可。
2. 虚拟导游房间开启同步时设定初始帧数，在一段帧数后开启消息同步。主机和从机通过帧数来保证时间是一致的。

对于解决方案有以下几个问题：
1.从机如何恢复数据状态？ 状态文件里的数据格式长什么样子？【主机传输的状态文件格式 以及 从机如何加载状态文件到内存】 考虑的点：状态文件大小越小越好，恢复速度越快越好，状态的完整性【最终完整】
  1.1  基于序列化框架如json 和 xml 。主机将数据集用JSON封装到文件 ，从机根据json文件重构场景
  1.2  基于状态机，所有植入物内部维护一个状态转化器和状态
  状态文件的要求：用最少的数据能最快的还原主机的状态。
2. 状态文件的生成时机
3. 在恢复数据时如果从机正在执行命令，如何处理修改覆盖问题
4. 

 
1.开启房间同步时，主机将场景中的所有植入物的状态都上报到服务器。服务器将这些状态作为初始状态保存到数据库。
2.开启同步时，设置房间的帧数为0，并每过1s，帧数+1。设置房间的命令ID为0，每收到一个消息，ID+1,设置状态的命令缓冲区，每接收到一个状态，就将其写入缓冲区。
3.主机开始执行操作，主机监听到动作，将动作解析成命令传播到服务端。
4.主机改变了自身的部分植入物的状态
5.命令达到服务端，服务端将命令转发给从机
6.从机接收到命令开始执行命令。
7.主机每隔一段时间就将当前有变化的植入物状态上报服务器，服务器修改库里的状态。
8.从机接收到第一条命令后，就开启一个子线程，每隔几个帧就和服务器上的状态比对一次。
9.如果存在差异，则等待当前命令执行完后，阻塞命令的执行，将新的状态回刷。


1. 房间成功开启同步之后 ， 主机开辟一个子线程，负责每隔一段时间将场景中的植入物的状态记录并发往服务器。
2. 服务器接收来自主机的状态记录后，为每一个状态做hash，并将每一个植入物的状态都写入数据库。
3. 房间成功开启同步之后 ，消息模块每隔一帧就会将前一帧所包含的命令发送到从机
4. 从机在同步开始之后，开始接收并处理来自消息中心的命令，执行命令的时候会使得状态发生变化。
5. 从机在同步开启之后，每隔一段时间，将从机置为比对状态，该状态会阻塞命令的执行，然后向服务器比对状态。每次执行完一个命令后，若从机处于比对状态，则将从机上的植物物的状态hash上报服务器进行比对。
6.若比对结果为一切正常，则退出比对阶段继续执行命令。若比对不正常，服务端会返状态不一致的植入物和他真正的状态，从机依据返回的状态进行修改。修改成功后，退出比对阶段。


